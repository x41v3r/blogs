{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1},{"_id":"themes/baozi/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/baozi/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/baozi/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/baozi/source/js/search.js","path":"js/search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1734879308501},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1734879343363},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1734879343363},{"_id":"source/_posts/c.md","hash":"31bdff3420f5a1d9b8dcab124b1647d19bc73996","modified":1734880224246},{"_id":"themes/3-hexo/.gitignore","hash":"86a50fa08e69cab561892aa5edef24f9081bbde1","modified":1734880991526},{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1734880991525},{"_id":"themes/3-hexo/README.md","hash":"d2c42534ceabcb7cd2e58ed994bf7d6f734d1f3b","modified":1734880991526},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1734880991526},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"c907bf3b8ef0b89bcd3ab90836e6f834518d36ba","modified":1734880991526},{"_id":"themes/3-hexo/languages/en.yml","hash":"85fb1d7f8b704febedc247aeda19bc3c30bbc088","modified":1734880991526},{"_id":"themes/3-hexo/layout/index.ejs","hash":"27ea3dac053d501b79bbef5117b4f3aff063d8cd","modified":1734880991527},{"_id":"themes/3-hexo/layout/indexs.md","hash":"1b352287869e33d9ee55233b33288fb55034d78c","modified":1734880991527},{"_id":"themes/3-hexo/layout/post.ejs","hash":"955cfffb5605099de53eb5bd5306975122d69f33","modified":1734880991527},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1734880991527},{"_id":"themes/3-hexo/_config.yml","hash":"2cd9112a9dad660f78a2d3362aca1670323b39f4","modified":1734880991526},{"_id":"themes/3-hexo/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0e662956cbfcaf6c1666e5c30a1fe03461de685e","modified":1734880991526},{"_id":"themes/3-hexo/source/css/style.styl","hash":"7090b81f34e26172670c68da6a366ca186523779","modified":1734880991530},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"59a4abd36cc8ff2107f1fcb3c0fe48d0492c9030","modified":1734880991530},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1734880991529},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1734880991532},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1734880991532},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1734880991530},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1734880991532},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1734880991530},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1734880991535},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1734880991535},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1734880991535},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1734880991535},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"0ebb17d001cb7bb7606c616c380049a2e7124496","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"e0ca22b2c49d5d0b0e1e64170356a523cd8a51bf","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"bc94eee27701b67d238f328737b578e8270989eb","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"f66939a8c9d5258948b47842b8b4495e6ec45988","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"d11092791e5c140ff81f2aefa0d1b051f403239d","modified":1734880991527},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"bf7723eac5b36dc99a3c97f5bb219ddd85cab8e4","modified":1734880991527},{"_id":"themes/3-hexo/source/js/script.js","hash":"e369c9098c3448fb5c144d904154b7e15ca28f67","modified":1734880991535},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1734880991527},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"8a9e93f9cbe80763264018290da0b14b4bbe8ac5","modified":1734880991527},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"a14cf10e8af1f7e83d6514c0a2912e14a0b8b0bd","modified":1734880991527},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"76768204853a8a5e030a96d605a247f9686cf994","modified":1734880991527},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1734880991527},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"cbad17074f7a44520b4c7dad5a515d6aaf5e1e14","modified":1734880991527},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"82e715547344e7ba911d66b4ceacf7c011338bfc","modified":1734880991527},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1734880991527},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"c68d6942ed62f9cce8a9042f5a59055a0ee5441c","modified":1734880991527},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0143711c1221cb4e70a3db866754d79c8a81d253","modified":1734880991527},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"d35df7f5e68880d1f1ebec541b816f8257fd42cb","modified":1734880991527},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"05dcaf21f281f8ce483562e66fc31bc0fe8a2171","modified":1734880991528},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1734880991528},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1734880991528},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"0dd8d208081b92e05d6db3361743c520a2816828","modified":1734880991528},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1734880991528},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1734880991528},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1734880991528},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"2a9b5ffb759be85545a89f6d1194579a800f51a5","modified":1734880991527},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1734880991528},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1734880991528},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1734880991528},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1734880991528},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1734880991529},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1734880991529},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1734880991529},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"3cf8ba0c6112dfa8089603b8df3e31f70a272715","modified":1734880991527},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1734880991527},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1734880991529},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1734880991530},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1734880991530},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1734880991530},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1734880991530},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1734880991530},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1734880991530},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/comments/giscus.ejs","hash":"941e7598a76f64fb4c5048c328a0237d05ca1abc","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"e820aa16b5ed4e024616b5e2d424925820d43e56","modified":1734880991526},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"be91620693ca62e0ca72ee26e7712eeac6a320e1","modified":1734880991526},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1734880991532},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1734880991535},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"2e622dbafa2b408baa1ab32df40c46ef67af6f93","modified":1734880991532},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1734880991534},{"_id":"themes/baozi/.gitattributes","hash":"ba3dfe345280bdcc5e817bb02cf49b8b8d8e1c4c","modified":1734881182991},{"_id":"themes/baozi/README.md","hash":"cc72556fc9abe53c5b879ec564b49f9f9d51d032","modified":1734881182991},{"_id":"themes/baozi/_config.yml","hash":"0c51d0392e9ae2a25ad2aa7099e43d33a90b259a","modified":1734881397188},{"_id":"themes/baozi/package.json","hash":"13f6a48e89414554170996c02ff9564b11bc0369","modified":1734881182993},{"_id":"themes/baozi/layout/archive.ejs","hash":"bb7e04544428cc013b6305db34edda9074c00395","modified":1734881182993},{"_id":"themes/baozi/layout/index.ejs","hash":"3052e71a75f02b6bb342b24fdf3549239a1b0d71","modified":1734881182993},{"_id":"themes/baozi/layout/layout.ejs","hash":"660b5a8011502fa2c76f168bcad241c2965dd4da","modified":1734881182993},{"_id":"themes/baozi/layout/post.ejs","hash":"584e9e3c0a59fc3883a0bf7d10969cbb485829d8","modified":1734881182993},{"_id":"themes/baozi/layout/_partial/footer.ejs","hash":"0aa6fe33ad70eaa238afbc233fb2fc714c4d5e76","modified":1734881182992},{"_id":"themes/baozi/layout/_partial/paginator.ejs","hash":"f861d9386fb35fa26bc104cdf984aa075d3b4e59","modified":1734881182992},{"_id":"themes/baozi/layout/_partial/header.ejs","hash":"4a1ce7b6f2c78617792b14cfa6bd1df20161aa4a","modified":1734881182992},{"_id":"themes/baozi/layout/_partial/head.ejs","hash":"5efd18bef6a3289f342f152f7727ad02b9899c58","modified":1734881182992},{"_id":"themes/baozi/layout/_partial/search.ejs","hash":"46957ec936cea7199de6fe96ea9b709866898922","modified":1734881182992},{"_id":"themes/baozi/layout/_partial/sidebar.ejs","hash":"767fd2e47a0cd97f1a719218dc67994db0142761","modified":1734881182993},{"_id":"themes/baozi/source/images/favicon.ico","hash":"b3dcc2bbd83dbc51f022f142f39ca680f78292f5","modified":1734881182995},{"_id":"themes/baozi/source/css/style.styl","hash":"76e02f0e4092309be816ebbaa580998b810ea165","modified":1734881182995},{"_id":"themes/baozi/source/js/search.js","hash":"563d2288364d5a4f7e6013677348034f467a20b1","modified":1734881182996},{"_id":"themes/baozi/source/css/_partial/archive.styl","hash":"4ab02ae4895a359fd281f33c7485755ef35d52ba","modified":1734881182994},{"_id":"themes/baozi/source/css/_partial/header.styl","hash":"e4616f6cb979ce2cdf51daec570de4a772293505","modified":1734881182994},{"_id":"themes/baozi/source/css/_partial/index.styl","hash":"51f77d451fd30c72e2ab639ddf10121b9b6f1c24","modified":1734881182994},{"_id":"themes/baozi/source/css/_partial/misc.styl","hash":"13d679c6112ea2f563dba0a3c4ee8cc35f332a6e","modified":1734881182994},{"_id":"themes/baozi/source/css/_partial/footer.styl","hash":"3915b3561318cc5dda886fe4905430966808d4ee","modified":1734881182994},{"_id":"themes/baozi/source/css/_partial/pagination.styl","hash":"13061254de93a989c9accdf2de10998600c6e413","modified":1734881182994},{"_id":"themes/baozi/source/css/_partial/post-highlight.styl","hash":"1dd826bddf5c77dcc80d515b0e3a2b9029f6f1b2","modified":1734881182994},{"_id":"themes/baozi/source/css/_partial/post.styl","hash":"53a435be3c6496f874dc6f37d584cef890ccd1ae","modified":1734881182994},{"_id":"themes/baozi/source/css/_partial/search.styl","hash":"8846c506ebe8b830430d189fbd20600006f85b2e","modified":1734881182995},{"_id":"themes/baozi/source/css/_partial/sidebar.styl","hash":"c9be6789eba3b8ecc8d6822cb1f6c28cb0e058c2","modified":1734881182995},{"_id":"themes/baozi/source/js/jquery.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1734881182996}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-12-22T14:55:08.501Z","updated":"2024-12-22T14:55:08.501Z","comments":1,"layout":"post","photos":[],"_id":"cm4zqrmt200004aij7alkgyoy","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"c.md","date":"2024-12-22T15:08:36.000Z","_content":"\n# 1 Introduction to C\n\n&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. \n\n```c\n#include <stdio.h>  //include information about standard library\n\nmain()  //define a funcation named \"main\"\n{  //statements of \"main\" are enclosed in braces\n    printf(\"hello, world\\n\");\n}\n```\n\n> &emsp;&emsp;A C program begins executing at the beginning of **main**. This means that every C program must have a **main** somewhere.\n\n# 2 Types, operators, and expressions\n\n## 2.1 Variable names\n\nThere are some restrictions on the names of variables and symbolic constants:\n\n* Names are made up of letters and digits; the first character must be a letter. \n* The underscore `_` counts as a letter, it is sometimes useful for **improving the readability of long variable names**. (Don't begin variable names with underscore, however, since library routines often use such names. )\n* **Upper case and lower case letters are distinct**, so \"x\" and \"X\" are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)\n\n## 2.2 Data types and sizes\n\nThere are only a few basic data types in C:\n\n| type    | description                                                                        |\n|:-------:|:----------------------------------------------------------------------------------:|\n| `char`  | A single byte, capable of holding one character in the local character set.        |\n| `int`   | An integer, typically reflecting the natural size of integers on the host machine. |\n| `float` | Single-precision floating point.                                                   |\n| `double`| Double-precision floating point.                                                   |\n\n&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. \n\n`short` and `long` apply to integers:\n\n```c\nshort int sh;\nlong int counter;\n```\n\n&emsp;&emsp;The word \"int\" can be omitted in such declarations, and typically is.\n\n> &emsp;&emsp;The intent is that `short` and `long` should provide different lengths of integers where practical; `int` will normally be the natural size for a particular machine.\n\nOn a 32-bit machine, `short` is often 16 bits, `long` 32 bits, and `int` either 16 or 32 bits.\n\nOn a 64-bit machine, `short` is 16 bits, `long` 64 bits, and `int` 32 bits.\n\n...\n\n> &emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that *`short`s and `int`s are at least 16 bits, `long`s are at least 32 bits, and `short` is no longer than `int`, which is no longer than `long`*.\n\n## 2.3 Constants\n\n&emsp;&emsp;An integer constant like `1234` is an `int`. A `long` constant is written with a terminal `l` or `L`, as in `123456789L`; an integer too big to fit into an `int` will also be taken as a `long`. The `unsigned int` constants are written with a terminal `u` or `U`, and the suffix `ul` or `UL` indicates `unsigned long`.\n\n```c\nint a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n```\n\nThe value of an integer *can be specified in octal or hexadecimal instead of decimal*: A leading `0` on an integer constant means **octal**; a leading `0x` or `0X` means **hexadecimal**.  \n\n```c\nint a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(\"a(037) = %d\\n\", a);  // a(037) = 31\nprintf(\"b(0x1F) = %d\\n\", b);  // b(0x1F) = 31\n```\n\n&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is `double`, unless suffixed. The suffixes `f` or `F` indicate a `float` constant; `l` or `L` indicate a `long double`.\n\n```c\ndouble d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n```\n\n&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as `'x'`. The value of a character constant is the numeric value of the character in the machine's character set.\n\n```c\nchar c = 'x';\n```\n\n> &emsp;&emsp;For example, in the ASCII character set the character constant `'0'` has the value `48`, which is unrelated to the numeric value `0`. If we write `'0'` instead of a numeric value like `48` that depends on character set, *the program is independent of the particular value and easier to read*.\n\n```c\nchar c = '0';\nint ci = c;  //ci = 48 \n```\n\n## 2.4 Declarations\n\n&emsp;&emsp;*All variables must be declared before use*, although certain declarations can be made implicitly by context.\n\nA declaration specifies a type, and contains a list of one or more variables of that type, as in:\n\n```c\nint lower, upper, step;\nchar c, line[100];\n```\n\nVariables can be distributed among declarations in any fashion; the lists above could equally well be written as:\n\n```c\nint lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n```\n\n> &emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.\n\n&emsp;&emsp;A variable may also be initialized in its declaration.\n\nIf the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:\n\n```c\nchar esc = '\\\\';\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n```\n\n## 2.5 Operators and expressions\n\n### 2.5.1 Arithmetic operators\n\n`+`&emsp;`-`&emsp;`*`&emsp;`/`&emsp;`%`\n\n### 2.5.2 Relational and logical operators\n\n`>`&emsp;`>=`&emsp;`<`&emsp;`<=`&emsp;`==`&emsp;`!=`\n\n`&&`&emsp;`||`&emsp;`!`\n\n### 2.5.3 Type conversions\n\n### 2.5.4 Increment and decrement operators\n\n&emsp;&emsp;The increment operator `++` adds `1` to its operand, while the decrement operator `--` subtracts `1`, as in \n\n```c\nint a = 10;\nint b = 10;\n\na++;\nb--;\n\nprintf(\"a = %d\\n\", a);  //11\nprintf(\"b = %d\\n\", b);  //9\n```\n\n### 2.5.5 Bitwise operators\n\n| Operator |  |\n|:--------:|:--------------------:|\n| `&`      | bitwise AND          |\n| `\\|`     | bitwise inclusive OR |\n| `^`      | bitwise exclusive OR |\n| `<<`     | left shift           |\n| `>>`     | right shift          |\n| `~`      | one's complement     |\n\n### 2.5.6 Assignment operators and expressions\n\n### 2.5.7 Conditional expressions\n\n# 3 Control flow\n\n## 3.1 Statements and blocks\n\n&emsp;&emsp;An expression such as `x = 0` or `i++` or `printf(...)` becomes a *statement* when it is followed by a semicolon `;`, as in\n\n```c\nx = 0;\ni++;\nprintf(...);\n```\n\n> In C, semicolon is a statement terminator, rather than ...\n\n&emsp;&emsp;Braces `{` and `}` are used to group declarations and statements together into a compound statement, or block, so that *they are syntactically equivalent to a single statement*.\n\n## 3.2 Branches\n\n### 3.2.1 if-else\n\n&emsp;&emsp;The **if-else** statement is used to express decisions. Formally, the syntax is\n\n```c\nif (expression)\n    statement1;\nelse\n    statement2;\n```\n\nwhere the `else` part is optional.\n\n> &emsp;&emsp;The *expression* is evaluated, if it is true (*that is, if expression has a non-zero value*), **statement1** is executed. If it is false (*expression is zero*) and if there is an `else` part, **statement2** is executed instead.\n\n&emsp;&emsp;Since an `if` simply tests the numeric value of an expression, certain coding shortcuts are possible. The most obvious is writing\n\n```c\nif(expression)\n```\n\ninstead of \n\n```c\nif(expression != 0)\n```\n\n> &emsp;&emsp;Sometimes this is natural and clear; at other times it can be cryptic.\n\n### 3.2.2 else-if\n\n&emsp;&emsp;The construction\n\n```c\nif (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse\n    statement;\n```\n\nis the most general way of writing a *multi-way decision*. \n\n> &emsp;&emsp;The expression are evaluated in order; *if any expression is true, the statement associated with it is executed, and this terminates the whole chain*. The last `else` part handles the “none of the above” or default case where none of the other conditions is satisfied.\n\n&emsp;&emsp;Sometimes there is no explicit action for the default; in that case the trailing\n\n```c\nelse\n    statement\n```\n\ncan be ommitted, it may be used for error checking to *catch an \"impossible\" condition*.\n\n### 3.2.3 switch\n\n&emsp;&emsp;The **switch** statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly.\n\n```c\nswitch (expression)\n{\n    case const-expr: statements\n    case const-expr: statements\n    default: statements\n}\n```\n\nEach **case** is labeled by one or more integer-valued constants or constant expressions.\n\nIf a case matches the expression value, *execution **starts** at the case. (All case expressions must be different.)*\n\nThe case labeled **default** is executed if none of the other cases are satisfied. (A default is optional.)\n\nIf there isn't a \"default\" and if none of the cases match, *no action at all takes place*.\n\nCases and the defult clause can occur in any order.\n\n## 3.3 Loops\n\n### 3.3.1 while\n\n### 3.3.2 for\n\n### 3.3.3 do-while\n\n## 3.4 break and continue\n\n## 3.5 goto\n\n# 4 Functions and program structure\n\n## 4.1 Basics of functions\n\n","source":"_posts/c.md","raw":"---\ntitle: c.md\ndate: 2024-12-22 23:08:36\ntags:\n---\n\n# 1 Introduction to C\n\n&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. \n\n```c\n#include <stdio.h>  //include information about standard library\n\nmain()  //define a funcation named \"main\"\n{  //statements of \"main\" are enclosed in braces\n    printf(\"hello, world\\n\");\n}\n```\n\n> &emsp;&emsp;A C program begins executing at the beginning of **main**. This means that every C program must have a **main** somewhere.\n\n# 2 Types, operators, and expressions\n\n## 2.1 Variable names\n\nThere are some restrictions on the names of variables and symbolic constants:\n\n* Names are made up of letters and digits; the first character must be a letter. \n* The underscore `_` counts as a letter, it is sometimes useful for **improving the readability of long variable names**. (Don't begin variable names with underscore, however, since library routines often use such names. )\n* **Upper case and lower case letters are distinct**, so \"x\" and \"X\" are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)\n\n## 2.2 Data types and sizes\n\nThere are only a few basic data types in C:\n\n| type    | description                                                                        |\n|:-------:|:----------------------------------------------------------------------------------:|\n| `char`  | A single byte, capable of holding one character in the local character set.        |\n| `int`   | An integer, typically reflecting the natural size of integers on the host machine. |\n| `float` | Single-precision floating point.                                                   |\n| `double`| Double-precision floating point.                                                   |\n\n&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. \n\n`short` and `long` apply to integers:\n\n```c\nshort int sh;\nlong int counter;\n```\n\n&emsp;&emsp;The word \"int\" can be omitted in such declarations, and typically is.\n\n> &emsp;&emsp;The intent is that `short` and `long` should provide different lengths of integers where practical; `int` will normally be the natural size for a particular machine.\n\nOn a 32-bit machine, `short` is often 16 bits, `long` 32 bits, and `int` either 16 or 32 bits.\n\nOn a 64-bit machine, `short` is 16 bits, `long` 64 bits, and `int` 32 bits.\n\n...\n\n> &emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that *`short`s and `int`s are at least 16 bits, `long`s are at least 32 bits, and `short` is no longer than `int`, which is no longer than `long`*.\n\n## 2.3 Constants\n\n&emsp;&emsp;An integer constant like `1234` is an `int`. A `long` constant is written with a terminal `l` or `L`, as in `123456789L`; an integer too big to fit into an `int` will also be taken as a `long`. The `unsigned int` constants are written with a terminal `u` or `U`, and the suffix `ul` or `UL` indicates `unsigned long`.\n\n```c\nint a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n```\n\nThe value of an integer *can be specified in octal or hexadecimal instead of decimal*: A leading `0` on an integer constant means **octal**; a leading `0x` or `0X` means **hexadecimal**.  \n\n```c\nint a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(\"a(037) = %d\\n\", a);  // a(037) = 31\nprintf(\"b(0x1F) = %d\\n\", b);  // b(0x1F) = 31\n```\n\n&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is `double`, unless suffixed. The suffixes `f` or `F` indicate a `float` constant; `l` or `L` indicate a `long double`.\n\n```c\ndouble d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n```\n\n&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as `'x'`. The value of a character constant is the numeric value of the character in the machine's character set.\n\n```c\nchar c = 'x';\n```\n\n> &emsp;&emsp;For example, in the ASCII character set the character constant `'0'` has the value `48`, which is unrelated to the numeric value `0`. If we write `'0'` instead of a numeric value like `48` that depends on character set, *the program is independent of the particular value and easier to read*.\n\n```c\nchar c = '0';\nint ci = c;  //ci = 48 \n```\n\n## 2.4 Declarations\n\n&emsp;&emsp;*All variables must be declared before use*, although certain declarations can be made implicitly by context.\n\nA declaration specifies a type, and contains a list of one or more variables of that type, as in:\n\n```c\nint lower, upper, step;\nchar c, line[100];\n```\n\nVariables can be distributed among declarations in any fashion; the lists above could equally well be written as:\n\n```c\nint lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n```\n\n> &emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.\n\n&emsp;&emsp;A variable may also be initialized in its declaration.\n\nIf the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:\n\n```c\nchar esc = '\\\\';\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n```\n\n## 2.5 Operators and expressions\n\n### 2.5.1 Arithmetic operators\n\n`+`&emsp;`-`&emsp;`*`&emsp;`/`&emsp;`%`\n\n### 2.5.2 Relational and logical operators\n\n`>`&emsp;`>=`&emsp;`<`&emsp;`<=`&emsp;`==`&emsp;`!=`\n\n`&&`&emsp;`||`&emsp;`!`\n\n### 2.5.3 Type conversions\n\n### 2.5.4 Increment and decrement operators\n\n&emsp;&emsp;The increment operator `++` adds `1` to its operand, while the decrement operator `--` subtracts `1`, as in \n\n```c\nint a = 10;\nint b = 10;\n\na++;\nb--;\n\nprintf(\"a = %d\\n\", a);  //11\nprintf(\"b = %d\\n\", b);  //9\n```\n\n### 2.5.5 Bitwise operators\n\n| Operator |  |\n|:--------:|:--------------------:|\n| `&`      | bitwise AND          |\n| `\\|`     | bitwise inclusive OR |\n| `^`      | bitwise exclusive OR |\n| `<<`     | left shift           |\n| `>>`     | right shift          |\n| `~`      | one's complement     |\n\n### 2.5.6 Assignment operators and expressions\n\n### 2.5.7 Conditional expressions\n\n# 3 Control flow\n\n## 3.1 Statements and blocks\n\n&emsp;&emsp;An expression such as `x = 0` or `i++` or `printf(...)` becomes a *statement* when it is followed by a semicolon `;`, as in\n\n```c\nx = 0;\ni++;\nprintf(...);\n```\n\n> In C, semicolon is a statement terminator, rather than ...\n\n&emsp;&emsp;Braces `{` and `}` are used to group declarations and statements together into a compound statement, or block, so that *they are syntactically equivalent to a single statement*.\n\n## 3.2 Branches\n\n### 3.2.1 if-else\n\n&emsp;&emsp;The **if-else** statement is used to express decisions. Formally, the syntax is\n\n```c\nif (expression)\n    statement1;\nelse\n    statement2;\n```\n\nwhere the `else` part is optional.\n\n> &emsp;&emsp;The *expression* is evaluated, if it is true (*that is, if expression has a non-zero value*), **statement1** is executed. If it is false (*expression is zero*) and if there is an `else` part, **statement2** is executed instead.\n\n&emsp;&emsp;Since an `if` simply tests the numeric value of an expression, certain coding shortcuts are possible. The most obvious is writing\n\n```c\nif(expression)\n```\n\ninstead of \n\n```c\nif(expression != 0)\n```\n\n> &emsp;&emsp;Sometimes this is natural and clear; at other times it can be cryptic.\n\n### 3.2.2 else-if\n\n&emsp;&emsp;The construction\n\n```c\nif (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse\n    statement;\n```\n\nis the most general way of writing a *multi-way decision*. \n\n> &emsp;&emsp;The expression are evaluated in order; *if any expression is true, the statement associated with it is executed, and this terminates the whole chain*. The last `else` part handles the “none of the above” or default case where none of the other conditions is satisfied.\n\n&emsp;&emsp;Sometimes there is no explicit action for the default; in that case the trailing\n\n```c\nelse\n    statement\n```\n\ncan be ommitted, it may be used for error checking to *catch an \"impossible\" condition*.\n\n### 3.2.3 switch\n\n&emsp;&emsp;The **switch** statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly.\n\n```c\nswitch (expression)\n{\n    case const-expr: statements\n    case const-expr: statements\n    default: statements\n}\n```\n\nEach **case** is labeled by one or more integer-valued constants or constant expressions.\n\nIf a case matches the expression value, *execution **starts** at the case. (All case expressions must be different.)*\n\nThe case labeled **default** is executed if none of the other cases are satisfied. (A default is optional.)\n\nIf there isn't a \"default\" and if none of the cases match, *no action at all takes place*.\n\nCases and the defult clause can occur in any order.\n\n## 3.3 Loops\n\n### 3.3.1 while\n\n### 3.3.2 for\n\n### 3.3.3 do-while\n\n## 3.4 break and continue\n\n## 3.5 goto\n\n# 4 Functions and program structure\n\n## 4.1 Basics of functions\n\n","slug":"c","published":1,"updated":"2024-12-22T15:10:24.246Z","comments":1,"layout":"post","photos":[],"_id":"cm4zqw8x20000pxijf03ra2bh","content":"<h1 id=\"1-Introduction-to-C\"><a href=\"#1-Introduction-to-C\" class=\"headerlink\" title=\"1 Introduction to C\"></a>1 Introduction to C</h1><p>&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>  <span class=\"comment\">//include information about standard library</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">main()  <span class=\"comment\">//define a funcation named &quot;main&quot;</span></span><br><span class=\"line\">&#123;  <span class=\"comment\">//statements of &quot;main&quot; are enclosed in braces</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello, world\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&emsp;&emsp;A C program begins executing at the beginning of <strong>main</strong>. This means that every C program must have a <strong>main</strong> somewhere.</p>\n</blockquote>\n<h1 id=\"2-Types-operators-and-expressions\"><a href=\"#2-Types-operators-and-expressions\" class=\"headerlink\" title=\"2 Types, operators, and expressions\"></a>2 Types, operators, and expressions</h1><h2 id=\"2-1-Variable-names\"><a href=\"#2-1-Variable-names\" class=\"headerlink\" title=\"2.1 Variable names\"></a>2.1 Variable names</h2><p>There are some restrictions on the names of variables and symbolic constants:</p>\n<ul>\n<li>Names are made up of letters and digits; the first character must be a letter. </li>\n<li>The underscore <code>_</code> counts as a letter, it is sometimes useful for <strong>improving the readability of long variable names</strong>. (Don’t begin variable names with underscore, however, since library routines often use such names. )</li>\n<li><strong>Upper case and lower case letters are distinct</strong>, so “x” and “X” are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)</li>\n</ul>\n<h2 id=\"2-2-Data-types-and-sizes\"><a href=\"#2-2-Data-types-and-sizes\" class=\"headerlink\" title=\"2.2 Data types and sizes\"></a>2.2 Data types and sizes</h2><p>There are only a few basic data types in C:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type</th>\n<th align=\"center\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>char</code></td>\n<td align=\"center\">A single byte, capable of holding one character in the local character set.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>int</code></td>\n<td align=\"center\">An integer, typically reflecting the natural size of integers on the host machine.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>float</code></td>\n<td align=\"center\">Single-precision floating point.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>double</code></td>\n<td align=\"center\">Double-precision floating point.</td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. </p>\n<p><code>short</code> and <code>long</code> apply to integers:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">short</span> <span class=\"type\">int</span> sh;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">int</span> counter;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;The word “int” can be omitted in such declarations, and typically is.</p>\n<blockquote>\n<p>&emsp;&emsp;The intent is that <code>short</code> and <code>long</code> should provide different lengths of integers where practical; <code>int</code> will normally be the natural size for a particular machine.</p>\n</blockquote>\n<p>On a 32-bit machine, <code>short</code> is often 16 bits, <code>long</code> 32 bits, and <code>int</code> either 16 or 32 bits.</p>\n<p>On a 64-bit machine, <code>short</code> is 16 bits, <code>long</code> 64 bits, and <code>int</code> 32 bits.</p>\n<p>…</p>\n<blockquote>\n<p>&emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that <em><code>short</code>s and <code>int</code>s are at least 16 bits, <code>long</code>s are at least 32 bits, and <code>short</code> is no longer than <code>int</code>, which is no longer than <code>long</code></em>.</p>\n</blockquote>\n<h2 id=\"2-3-Constants\"><a href=\"#2-3-Constants\" class=\"headerlink\" title=\"2.3 Constants\"></a>2.3 Constants</h2><p>&emsp;&emsp;An integer constant like <code>1234</code> is an <code>int</code>. A <code>long</code> constant is written with a terminal <code>l</code> or <code>L</code>, as in <code>123456789L</code>; an integer too big to fit into an <code>int</code> will also be taken as a <code>long</code>. The <code>unsigned int</code> constants are written with a terminal <code>u</code> or <code>U</code>, and the suffix <code>ul</code> or <code>UL</code> indicates <code>unsigned long</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">1234</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> ua = <span class=\"number\">1234u</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">long</span> b = <span class=\"number\">1234567890L</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">long</span> ub = <span class=\"number\">1234567890UL</span>;</span><br></pre></td></tr></table></figure>\n\n<p>The value of an integer <em>can be specified in octal or hexadecimal instead of decimal</em>: A leading <code>0</code> on an integer constant means <strong>octal</strong>; a leading <code>0x</code> or <code>0X</code> means <strong>hexadecimal</strong>.  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">037</span>;  <span class=\"comment\">// 31 in octal</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">0x1F</span>;  <span class=\"comment\">// 31 in hexadecimal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a(037) = %d\\n&quot;</span>, a);  <span class=\"comment\">// a(037) = 31</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b(0x1F) = %d\\n&quot;</span>, b);  <span class=\"comment\">// b(0x1F) = 31</span></span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is <code>double</code>, unless suffixed. The suffixes <code>f</code> or <code>F</code> indicate a <code>float</code> constant; <code>l</code> or <code>L</code> indicate a <code>long double</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> d = <span class=\"number\">12.34</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> f = <span class=\"number\">12.34f</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">double</span> ld = <span class=\"number\">12.34L</span>;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as <code>&#39;x&#39;</code>. The value of a character constant is the numeric value of the character in the machine’s character set.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> c = <span class=\"string\">&#x27;x&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&emsp;&emsp;For example, in the ASCII character set the character constant <code>&#39;0&#39;</code> has the value <code>48</code>, which is unrelated to the numeric value <code>0</code>. If we write <code>&#39;0&#39;</code> instead of a numeric value like <code>48</code> that depends on character set, <em>the program is independent of the particular value and easier to read</em>.</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> c = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ci = c;  <span class=\"comment\">//ci = 48 </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-Declarations\"><a href=\"#2-4-Declarations\" class=\"headerlink\" title=\"2.4 Declarations\"></a>2.4 Declarations</h2><p>&emsp;&emsp;<em>All variables must be declared before use</em>, although certain declarations can be made implicitly by context.</p>\n<p>A declaration specifies a type, and contains a list of one or more variables of that type, as in:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> lower, upper, step;</span><br><span class=\"line\"><span class=\"type\">char</span> c, line[<span class=\"number\">100</span>];</span><br></pre></td></tr></table></figure>\n\n<p>Variables can be distributed among declarations in any fashion; the lists above could equally well be written as:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> lower;</span><br><span class=\"line\"><span class=\"type\">int</span> upper;</span><br><span class=\"line\"><span class=\"type\">int</span> step;</span><br><span class=\"line\"><span class=\"type\">char</span> c;</span><br><span class=\"line\"><span class=\"type\">char</span> line[<span class=\"number\">1000</span>];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.</p>\n</blockquote>\n<p>&emsp;&emsp;A variable may also be initialized in its declaration.</p>\n<p>If the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> esc = <span class=\"string\">&#x27;\\\\&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> limit MAXLINE+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> eps = <span class=\"number\">1.0e-5</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-5-Operators-and-expressions\"><a href=\"#2-5-Operators-and-expressions\" class=\"headerlink\" title=\"2.5 Operators and expressions\"></a>2.5 Operators and expressions</h2><h3 id=\"2-5-1-Arithmetic-operators\"><a href=\"#2-5-1-Arithmetic-operators\" class=\"headerlink\" title=\"2.5.1 Arithmetic operators\"></a>2.5.1 Arithmetic operators</h3><p><code>+</code>&emsp;<code>-</code>&emsp;<code>*</code>&emsp;<code>/</code>&emsp;<code>%</code></p>\n<h3 id=\"2-5-2-Relational-and-logical-operators\"><a href=\"#2-5-2-Relational-and-logical-operators\" class=\"headerlink\" title=\"2.5.2 Relational and logical operators\"></a>2.5.2 Relational and logical operators</h3><p><code>&gt;</code>&emsp;<code>&gt;=</code>&emsp;<code>&lt;</code>&emsp;<code>&lt;=</code>&emsp;<code>==</code>&emsp;<code>!=</code></p>\n<p><code>&amp;&amp;</code>&emsp;<code>||</code>&emsp;<code>!</code></p>\n<h3 id=\"2-5-3-Type-conversions\"><a href=\"#2-5-3-Type-conversions\" class=\"headerlink\" title=\"2.5.3 Type conversions\"></a>2.5.3 Type conversions</h3><h3 id=\"2-5-4-Increment-and-decrement-operators\"><a href=\"#2-5-4-Increment-and-decrement-operators\" class=\"headerlink\" title=\"2.5.4 Increment and decrement operators\"></a>2.5.4 Increment and decrement operators</h3><p>&emsp;&emsp;The increment operator <code>++</code> adds <code>1</code> to its operand, while the decrement operator <code>--</code> subtracts <code>1</code>, as in </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a++;</span><br><span class=\"line\">b--;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a = %d\\n&quot;</span>, a);  <span class=\"comment\">//11</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b = %d\\n&quot;</span>, b);  <span class=\"comment\">//9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-5-Bitwise-operators\"><a href=\"#2-5-5-Bitwise-operators\" class=\"headerlink\" title=\"2.5.5 Bitwise operators\"></a>2.5.5 Bitwise operators</h3><table>\n<thead>\n<tr>\n<th align=\"center\">Operator</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>&amp;</code></td>\n<td align=\"center\">bitwise AND</td>\n</tr>\n<tr>\n<td align=\"center\"><code>|</code></td>\n<td align=\"center\">bitwise inclusive OR</td>\n</tr>\n<tr>\n<td align=\"center\"><code>^</code></td>\n<td align=\"center\">bitwise exclusive OR</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&lt;&lt;</code></td>\n<td align=\"center\">left shift</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;&gt;</code></td>\n<td align=\"center\">right shift</td>\n</tr>\n<tr>\n<td align=\"center\"><code>~</code></td>\n<td align=\"center\">one’s complement</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-5-6-Assignment-operators-and-expressions\"><a href=\"#2-5-6-Assignment-operators-and-expressions\" class=\"headerlink\" title=\"2.5.6 Assignment operators and expressions\"></a>2.5.6 Assignment operators and expressions</h3><h3 id=\"2-5-7-Conditional-expressions\"><a href=\"#2-5-7-Conditional-expressions\" class=\"headerlink\" title=\"2.5.7 Conditional expressions\"></a>2.5.7 Conditional expressions</h3><h1 id=\"3-Control-flow\"><a href=\"#3-Control-flow\" class=\"headerlink\" title=\"3 Control flow\"></a>3 Control flow</h1><h2 id=\"3-1-Statements-and-blocks\"><a href=\"#3-1-Statements-and-blocks\" class=\"headerlink\" title=\"3.1 Statements and blocks\"></a>3.1 Statements and blocks</h2><p>&emsp;&emsp;An expression such as <code>x = 0</code> or <code>i++</code> or <code>printf(...)</code> becomes a <em>statement</em> when it is followed by a semicolon <code>;</code>, as in</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0</span>;</span><br><span class=\"line\">i++;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(...);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>In C, semicolon is a statement terminator, rather than …</p>\n</blockquote>\n<p>&emsp;&emsp;Braces <code>&#123;</code> and <code>&#125;</code> are used to group declarations and statements together into a compound statement, or block, so that <em>they are syntactically equivalent to a single statement</em>.</p>\n<h2 id=\"3-2-Branches\"><a href=\"#3-2-Branches\" class=\"headerlink\" title=\"3.2 Branches\"></a>3.2 Branches</h2><h3 id=\"3-2-1-if-else\"><a href=\"#3-2-1-if-else\" class=\"headerlink\" title=\"3.2.1 if-else\"></a>3.2.1 if-else</h3><p>&emsp;&emsp;The <strong>if-else</strong> statement is used to express decisions. Formally, the syntax is</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement1;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    statement2;</span><br></pre></td></tr></table></figure>\n\n<p>where the <code>else</code> part is optional.</p>\n<blockquote>\n<p>&emsp;&emsp;The <em>expression</em> is evaluated, if it is true (<em>that is, if expression has a non-zero value</em>), <strong>statement1</strong> is executed. If it is false (<em>expression is zero</em>) and if there is an <code>else</code> part, <strong>statement2</strong> is executed instead.</p>\n</blockquote>\n<p>&emsp;&emsp;Since an <code>if</code> simply tests the numeric value of an expression, certain coding shortcuts are possible. The most obvious is writing</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(expression)</span><br></pre></td></tr></table></figure>\n\n<p>instead of </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(expression != <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&emsp;&emsp;Sometimes this is natural and clear; at other times it can be cryptic.</p>\n</blockquote>\n<h3 id=\"3-2-2-else-if\"><a href=\"#3-2-2-else-if\" class=\"headerlink\" title=\"3.2.2 else-if\"></a>3.2.2 else-if</h3><p>&emsp;&emsp;The construction</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    statement;</span><br></pre></td></tr></table></figure>\n\n<p>is the most general way of writing a <em>multi-way decision</em>. </p>\n<blockquote>\n<p>&emsp;&emsp;The expression are evaluated in order; <em>if any expression is true, the statement associated with it is executed, and this terminates the whole chain</em>. The last <code>else</code> part handles the “none of the above” or default case where none of the other conditions is satisfied.</p>\n</blockquote>\n<p>&emsp;&emsp;Sometimes there is no explicit action for the default; in that case the trailing</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    statement</span><br></pre></td></tr></table></figure>\n\n<p>can be ommitted, it may be used for error checking to <em>catch an “impossible” condition</em>.</p>\n<h3 id=\"3-2-3-switch\"><a href=\"#3-2-3-switch\" class=\"headerlink\" title=\"3.2.3 switch\"></a>3.2.3 switch</h3><p>&emsp;&emsp;The <strong>switch</strong> statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (expression)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">const</span>-expr: statements</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">const</span>-expr: statements</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Each <strong>case</strong> is labeled by one or more integer-valued constants or constant expressions.</p>\n<p>If a case matches the expression value, <em>execution <strong>starts</strong> at the case. (All case expressions must be different.)</em></p>\n<p>The case labeled <strong>default</strong> is executed if none of the other cases are satisfied. (A default is optional.)</p>\n<p>If there isn’t a “default” and if none of the cases match, <em>no action at all takes place</em>.</p>\n<p>Cases and the defult clause can occur in any order.</p>\n<h2 id=\"3-3-Loops\"><a href=\"#3-3-Loops\" class=\"headerlink\" title=\"3.3 Loops\"></a>3.3 Loops</h2><h3 id=\"3-3-1-while\"><a href=\"#3-3-1-while\" class=\"headerlink\" title=\"3.3.1 while\"></a>3.3.1 while</h3><h3 id=\"3-3-2-for\"><a href=\"#3-3-2-for\" class=\"headerlink\" title=\"3.3.2 for\"></a>3.3.2 for</h3><h3 id=\"3-3-3-do-while\"><a href=\"#3-3-3-do-while\" class=\"headerlink\" title=\"3.3.3 do-while\"></a>3.3.3 do-while</h3><h2 id=\"3-4-break-and-continue\"><a href=\"#3-4-break-and-continue\" class=\"headerlink\" title=\"3.4 break and continue\"></a>3.4 break and continue</h2><h2 id=\"3-5-goto\"><a href=\"#3-5-goto\" class=\"headerlink\" title=\"3.5 goto\"></a>3.5 goto</h2><h1 id=\"4-Functions-and-program-structure\"><a href=\"#4-Functions-and-program-structure\" class=\"headerlink\" title=\"4 Functions and program structure\"></a>4 Functions and program structure</h1><h2 id=\"4-1-Basics-of-functions\"><a href=\"#4-1-Basics-of-functions\" class=\"headerlink\" title=\"4.1 Basics of functions\"></a>4.1 Basics of functions</h2>","excerpt":"","more":"<h1 id=\"1-Introduction-to-C\"><a href=\"#1-Introduction-to-C\" class=\"headerlink\" title=\"1 Introduction to C\"></a>1 Introduction to C</h1><p>&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>  <span class=\"comment\">//include information about standard library</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">main()  <span class=\"comment\">//define a funcation named &quot;main&quot;</span></span><br><span class=\"line\">&#123;  <span class=\"comment\">//statements of &quot;main&quot; are enclosed in braces</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello, world\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&emsp;&emsp;A C program begins executing at the beginning of <strong>main</strong>. This means that every C program must have a <strong>main</strong> somewhere.</p>\n</blockquote>\n<h1 id=\"2-Types-operators-and-expressions\"><a href=\"#2-Types-operators-and-expressions\" class=\"headerlink\" title=\"2 Types, operators, and expressions\"></a>2 Types, operators, and expressions</h1><h2 id=\"2-1-Variable-names\"><a href=\"#2-1-Variable-names\" class=\"headerlink\" title=\"2.1 Variable names\"></a>2.1 Variable names</h2><p>There are some restrictions on the names of variables and symbolic constants:</p>\n<ul>\n<li>Names are made up of letters and digits; the first character must be a letter. </li>\n<li>The underscore <code>_</code> counts as a letter, it is sometimes useful for <strong>improving the readability of long variable names</strong>. (Don’t begin variable names with underscore, however, since library routines often use such names. )</li>\n<li><strong>Upper case and lower case letters are distinct</strong>, so “x” and “X” are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)</li>\n</ul>\n<h2 id=\"2-2-Data-types-and-sizes\"><a href=\"#2-2-Data-types-and-sizes\" class=\"headerlink\" title=\"2.2 Data types and sizes\"></a>2.2 Data types and sizes</h2><p>There are only a few basic data types in C:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type</th>\n<th align=\"center\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>char</code></td>\n<td align=\"center\">A single byte, capable of holding one character in the local character set.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>int</code></td>\n<td align=\"center\">An integer, typically reflecting the natural size of integers on the host machine.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>float</code></td>\n<td align=\"center\">Single-precision floating point.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>double</code></td>\n<td align=\"center\">Double-precision floating point.</td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. </p>\n<p><code>short</code> and <code>long</code> apply to integers:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">short</span> <span class=\"type\">int</span> sh;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">int</span> counter;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;The word “int” can be omitted in such declarations, and typically is.</p>\n<blockquote>\n<p>&emsp;&emsp;The intent is that <code>short</code> and <code>long</code> should provide different lengths of integers where practical; <code>int</code> will normally be the natural size for a particular machine.</p>\n</blockquote>\n<p>On a 32-bit machine, <code>short</code> is often 16 bits, <code>long</code> 32 bits, and <code>int</code> either 16 or 32 bits.</p>\n<p>On a 64-bit machine, <code>short</code> is 16 bits, <code>long</code> 64 bits, and <code>int</code> 32 bits.</p>\n<p>…</p>\n<blockquote>\n<p>&emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that <em><code>short</code>s and <code>int</code>s are at least 16 bits, <code>long</code>s are at least 32 bits, and <code>short</code> is no longer than <code>int</code>, which is no longer than <code>long</code></em>.</p>\n</blockquote>\n<h2 id=\"2-3-Constants\"><a href=\"#2-3-Constants\" class=\"headerlink\" title=\"2.3 Constants\"></a>2.3 Constants</h2><p>&emsp;&emsp;An integer constant like <code>1234</code> is an <code>int</code>. A <code>long</code> constant is written with a terminal <code>l</code> or <code>L</code>, as in <code>123456789L</code>; an integer too big to fit into an <code>int</code> will also be taken as a <code>long</code>. The <code>unsigned int</code> constants are written with a terminal <code>u</code> or <code>U</code>, and the suffix <code>ul</code> or <code>UL</code> indicates <code>unsigned long</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">1234</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> ua = <span class=\"number\">1234u</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">long</span> b = <span class=\"number\">1234567890L</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">long</span> ub = <span class=\"number\">1234567890UL</span>;</span><br></pre></td></tr></table></figure>\n\n<p>The value of an integer <em>can be specified in octal or hexadecimal instead of decimal</em>: A leading <code>0</code> on an integer constant means <strong>octal</strong>; a leading <code>0x</code> or <code>0X</code> means <strong>hexadecimal</strong>.  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">037</span>;  <span class=\"comment\">// 31 in octal</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">0x1F</span>;  <span class=\"comment\">// 31 in hexadecimal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a(037) = %d\\n&quot;</span>, a);  <span class=\"comment\">// a(037) = 31</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b(0x1F) = %d\\n&quot;</span>, b);  <span class=\"comment\">// b(0x1F) = 31</span></span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is <code>double</code>, unless suffixed. The suffixes <code>f</code> or <code>F</code> indicate a <code>float</code> constant; <code>l</code> or <code>L</code> indicate a <code>long double</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> d = <span class=\"number\">12.34</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> f = <span class=\"number\">12.34f</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">double</span> ld = <span class=\"number\">12.34L</span>;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as <code>&#39;x&#39;</code>. The value of a character constant is the numeric value of the character in the machine’s character set.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> c = <span class=\"string\">&#x27;x&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&emsp;&emsp;For example, in the ASCII character set the character constant <code>&#39;0&#39;</code> has the value <code>48</code>, which is unrelated to the numeric value <code>0</code>. If we write <code>&#39;0&#39;</code> instead of a numeric value like <code>48</code> that depends on character set, <em>the program is independent of the particular value and easier to read</em>.</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> c = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ci = c;  <span class=\"comment\">//ci = 48 </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-Declarations\"><a href=\"#2-4-Declarations\" class=\"headerlink\" title=\"2.4 Declarations\"></a>2.4 Declarations</h2><p>&emsp;&emsp;<em>All variables must be declared before use</em>, although certain declarations can be made implicitly by context.</p>\n<p>A declaration specifies a type, and contains a list of one or more variables of that type, as in:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> lower, upper, step;</span><br><span class=\"line\"><span class=\"type\">char</span> c, line[<span class=\"number\">100</span>];</span><br></pre></td></tr></table></figure>\n\n<p>Variables can be distributed among declarations in any fashion; the lists above could equally well be written as:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> lower;</span><br><span class=\"line\"><span class=\"type\">int</span> upper;</span><br><span class=\"line\"><span class=\"type\">int</span> step;</span><br><span class=\"line\"><span class=\"type\">char</span> c;</span><br><span class=\"line\"><span class=\"type\">char</span> line[<span class=\"number\">1000</span>];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.</p>\n</blockquote>\n<p>&emsp;&emsp;A variable may also be initialized in its declaration.</p>\n<p>If the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> esc = <span class=\"string\">&#x27;\\\\&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> limit MAXLINE+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> eps = <span class=\"number\">1.0e-5</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-5-Operators-and-expressions\"><a href=\"#2-5-Operators-and-expressions\" class=\"headerlink\" title=\"2.5 Operators and expressions\"></a>2.5 Operators and expressions</h2><h3 id=\"2-5-1-Arithmetic-operators\"><a href=\"#2-5-1-Arithmetic-operators\" class=\"headerlink\" title=\"2.5.1 Arithmetic operators\"></a>2.5.1 Arithmetic operators</h3><p><code>+</code>&emsp;<code>-</code>&emsp;<code>*</code>&emsp;<code>/</code>&emsp;<code>%</code></p>\n<h3 id=\"2-5-2-Relational-and-logical-operators\"><a href=\"#2-5-2-Relational-and-logical-operators\" class=\"headerlink\" title=\"2.5.2 Relational and logical operators\"></a>2.5.2 Relational and logical operators</h3><p><code>&gt;</code>&emsp;<code>&gt;=</code>&emsp;<code>&lt;</code>&emsp;<code>&lt;=</code>&emsp;<code>==</code>&emsp;<code>!=</code></p>\n<p><code>&amp;&amp;</code>&emsp;<code>||</code>&emsp;<code>!</code></p>\n<h3 id=\"2-5-3-Type-conversions\"><a href=\"#2-5-3-Type-conversions\" class=\"headerlink\" title=\"2.5.3 Type conversions\"></a>2.5.3 Type conversions</h3><h3 id=\"2-5-4-Increment-and-decrement-operators\"><a href=\"#2-5-4-Increment-and-decrement-operators\" class=\"headerlink\" title=\"2.5.4 Increment and decrement operators\"></a>2.5.4 Increment and decrement operators</h3><p>&emsp;&emsp;The increment operator <code>++</code> adds <code>1</code> to its operand, while the decrement operator <code>--</code> subtracts <code>1</code>, as in </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a++;</span><br><span class=\"line\">b--;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a = %d\\n&quot;</span>, a);  <span class=\"comment\">//11</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b = %d\\n&quot;</span>, b);  <span class=\"comment\">//9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-5-Bitwise-operators\"><a href=\"#2-5-5-Bitwise-operators\" class=\"headerlink\" title=\"2.5.5 Bitwise operators\"></a>2.5.5 Bitwise operators</h3><table>\n<thead>\n<tr>\n<th align=\"center\">Operator</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>&amp;</code></td>\n<td align=\"center\">bitwise AND</td>\n</tr>\n<tr>\n<td align=\"center\"><code>|</code></td>\n<td align=\"center\">bitwise inclusive OR</td>\n</tr>\n<tr>\n<td align=\"center\"><code>^</code></td>\n<td align=\"center\">bitwise exclusive OR</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&lt;&lt;</code></td>\n<td align=\"center\">left shift</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;&gt;</code></td>\n<td align=\"center\">right shift</td>\n</tr>\n<tr>\n<td align=\"center\"><code>~</code></td>\n<td align=\"center\">one’s complement</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-5-6-Assignment-operators-and-expressions\"><a href=\"#2-5-6-Assignment-operators-and-expressions\" class=\"headerlink\" title=\"2.5.6 Assignment operators and expressions\"></a>2.5.6 Assignment operators and expressions</h3><h3 id=\"2-5-7-Conditional-expressions\"><a href=\"#2-5-7-Conditional-expressions\" class=\"headerlink\" title=\"2.5.7 Conditional expressions\"></a>2.5.7 Conditional expressions</h3><h1 id=\"3-Control-flow\"><a href=\"#3-Control-flow\" class=\"headerlink\" title=\"3 Control flow\"></a>3 Control flow</h1><h2 id=\"3-1-Statements-and-blocks\"><a href=\"#3-1-Statements-and-blocks\" class=\"headerlink\" title=\"3.1 Statements and blocks\"></a>3.1 Statements and blocks</h2><p>&emsp;&emsp;An expression such as <code>x = 0</code> or <code>i++</code> or <code>printf(...)</code> becomes a <em>statement</em> when it is followed by a semicolon <code>;</code>, as in</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0</span>;</span><br><span class=\"line\">i++;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(...);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>In C, semicolon is a statement terminator, rather than …</p>\n</blockquote>\n<p>&emsp;&emsp;Braces <code>&#123;</code> and <code>&#125;</code> are used to group declarations and statements together into a compound statement, or block, so that <em>they are syntactically equivalent to a single statement</em>.</p>\n<h2 id=\"3-2-Branches\"><a href=\"#3-2-Branches\" class=\"headerlink\" title=\"3.2 Branches\"></a>3.2 Branches</h2><h3 id=\"3-2-1-if-else\"><a href=\"#3-2-1-if-else\" class=\"headerlink\" title=\"3.2.1 if-else\"></a>3.2.1 if-else</h3><p>&emsp;&emsp;The <strong>if-else</strong> statement is used to express decisions. Formally, the syntax is</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement1;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    statement2;</span><br></pre></td></tr></table></figure>\n\n<p>where the <code>else</code> part is optional.</p>\n<blockquote>\n<p>&emsp;&emsp;The <em>expression</em> is evaluated, if it is true (<em>that is, if expression has a non-zero value</em>), <strong>statement1</strong> is executed. If it is false (<em>expression is zero</em>) and if there is an <code>else</code> part, <strong>statement2</strong> is executed instead.</p>\n</blockquote>\n<p>&emsp;&emsp;Since an <code>if</code> simply tests the numeric value of an expression, certain coding shortcuts are possible. The most obvious is writing</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(expression)</span><br></pre></td></tr></table></figure>\n\n<p>instead of </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(expression != <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&emsp;&emsp;Sometimes this is natural and clear; at other times it can be cryptic.</p>\n</blockquote>\n<h3 id=\"3-2-2-else-if\"><a href=\"#3-2-2-else-if\" class=\"headerlink\" title=\"3.2.2 else-if\"></a>3.2.2 else-if</h3><p>&emsp;&emsp;The construction</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">    statement;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    statement;</span><br></pre></td></tr></table></figure>\n\n<p>is the most general way of writing a <em>multi-way decision</em>. </p>\n<blockquote>\n<p>&emsp;&emsp;The expression are evaluated in order; <em>if any expression is true, the statement associated with it is executed, and this terminates the whole chain</em>. The last <code>else</code> part handles the “none of the above” or default case where none of the other conditions is satisfied.</p>\n</blockquote>\n<p>&emsp;&emsp;Sometimes there is no explicit action for the default; in that case the trailing</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    statement</span><br></pre></td></tr></table></figure>\n\n<p>can be ommitted, it may be used for error checking to <em>catch an “impossible” condition</em>.</p>\n<h3 id=\"3-2-3-switch\"><a href=\"#3-2-3-switch\" class=\"headerlink\" title=\"3.2.3 switch\"></a>3.2.3 switch</h3><p>&emsp;&emsp;The <strong>switch</strong> statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (expression)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">const</span>-expr: statements</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">const</span>-expr: statements</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Each <strong>case</strong> is labeled by one or more integer-valued constants or constant expressions.</p>\n<p>If a case matches the expression value, <em>execution <strong>starts</strong> at the case. (All case expressions must be different.)</em></p>\n<p>The case labeled <strong>default</strong> is executed if none of the other cases are satisfied. (A default is optional.)</p>\n<p>If there isn’t a “default” and if none of the cases match, <em>no action at all takes place</em>.</p>\n<p>Cases and the defult clause can occur in any order.</p>\n<h2 id=\"3-3-Loops\"><a href=\"#3-3-Loops\" class=\"headerlink\" title=\"3.3 Loops\"></a>3.3 Loops</h2><h3 id=\"3-3-1-while\"><a href=\"#3-3-1-while\" class=\"headerlink\" title=\"3.3.1 while\"></a>3.3.1 while</h3><h3 id=\"3-3-2-for\"><a href=\"#3-3-2-for\" class=\"headerlink\" title=\"3.3.2 for\"></a>3.3.2 for</h3><h3 id=\"3-3-3-do-while\"><a href=\"#3-3-3-do-while\" class=\"headerlink\" title=\"3.3.3 do-while\"></a>3.3.3 do-while</h3><h2 id=\"3-4-break-and-continue\"><a href=\"#3-4-break-and-continue\" class=\"headerlink\" title=\"3.4 break and continue\"></a>3.4 break and continue</h2><h2 id=\"3-5-goto\"><a href=\"#3-5-goto\" class=\"headerlink\" title=\"3.5 goto\"></a>3.5 goto</h2><h1 id=\"4-Functions-and-program-structure\"><a href=\"#4-Functions-and-program-structure\" class=\"headerlink\" title=\"4 Functions and program structure\"></a>4 Functions and program structure</h1><h2 id=\"4-1-Basics-of-functions\"><a href=\"#4-1-Basics-of-functions\" class=\"headerlink\" title=\"4.1 Basics of functions\"></a>4.1 Basics of functions</h2>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}